
1. Change _BottomNavigation to stateful widget
2. create instance variable of _currentIndex
3. onTap setState of _currentIndex to index you are getting from onTap
4. Provide _currentIndex to currentIndex of BottomNavigationBar


1. Create new screen "MeetupDetailScreen" as stateless widget
   in screens/meetup_detail_screen.dart
2. in build return Scaffold:
   - in body display text of: "I am Meetup Detail Screen"
   - appBar with title "Meetup Detail"



1. Create new stateless widget called "_PostList" in post_screen.dart
2. Move ListView from PostScreen to _PostList
3. Provide _PostList to "body" of Scaffold in PostScreen
4. Pass _posts to _PostList via Constructor -> when you instanciating
   e.g - _PostList(posts: _posts)


1. Create new screen "MeetupHomeScreen" as stateful widget
   in screens/meetup_home_screen.dart
2. in build of state return Scaffold:
   - in body display text in center with text: "I am Meetup Home Screen"
   - appBar with title "Home"
3. Provide "MeetupHomeScreen" as home screen to "MaterialApp"


1. In "MeetupHomeScreenState" fetch "meetups" and assign these "meetups"
   to the state
2. pass "meetups" to _MeetupList and in list builder
   return _MeetupCard with "meetup" from "meetups"
3. In _MeetupCard replace
   - avatar url with "meetup.image"
   - title with "meetup.title"
   - subtitle with "meetup.description"


1. Create stateful "Register" and "Login" screens
2. Register "routes" to "Login" and "Register" screens in "main.dart"
3. In "Login" Screen Create button to navigate to "Register" screen
4. In "Register" Screen Create button to navigate to "Login" screen
5. Display "Login" screen as home screen



1. In widgets folder create "ThreadList" statelessWidget
2. Expect to receive meetupBloc to "ThreadList" widget
3. implement "fetchThreads" to meetupApiProvider - from resources
   NOTE: don't forget to pass meetup.id to fetchThreads
4. implement "thread" and new "post" model - from resources
5. in meetupBloc implement "threads behavior subject" + stream and sink
6. in meetupBloc create function "fetchThreads" where you will call
   "fetchThreads" from API
7. retreive threads from "fetchThreads" call and pass them to stream
8. in "ThreadList" create streamBuilder and listen to this stream
   when you receive data, display just simple list of each "thread" title, e.g: thread.title


1. In widgets folder create "JoinedPeopleList" statelessWidget
2. Expect to receive meetupBloc to "JoinedPeopleList" widget
3. in "JoinedPeopleList" build function return StreamBuilder and
   listen to "meetup" stream
4. In StreamBuilder "builder" function provide code from resources
